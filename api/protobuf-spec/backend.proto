// Follow the guidelines at https://cloud.google.com/endpoints/docs/grpc/transcoding
// to keep the gRPC service definitions friendly to REST transcoding. An excerpt:
//
// "Transcoding involves mapping HTTP/JSON requests and their parameters to gRPC
// methods and their parameters and return types (we'll look at exactly how you
// do this in the following sections). Because of this, while it's possible to
// map an HTTP/JSON request to any arbitrary API method, it's simplest and most
// intuitive to do so if the gRPC API itself is structured in a
// resource-oriented way, just like a traditional HTTP REST API. In other
// words, the API service should be designed so that it uses a small number of
// standard methods (corresponding to HTTP verbs like GET, PUT, and so on) that
// operate on the service's resources (and collections of resources, which are
// themselves a type of resource). 
// These standard methods are List, Get, Create, Update, and Delete."
//
syntax = 'proto3';

// Most of the protobuf messages sent in the gRPC calls are defined 'om_messages.proto'.
import 'om_messages.proto';

service API {
  // Calls to ask the matchmaker to run a matchmaking function.
  //
  // Run MMF once.  Return a matchobject that fits this profile.
  rpc CreateMatch(Profile) returns (MatchObject) {} 
  // Continually run MMF and stream matchobjects that fit this profile until
  // client closes the connection.
  rpc ListMatches(Profile) returns (stream MatchObject) {}

  // Delete a matchobject from state storage manually. (Matchobjects in state
  // storage will also automatically expire after a while)
  rpc DeleteMatch(MatchObject) returns (Result) {}

  // Call that manage communication of  DGS connection info to players. 
  //
  // Write the DGS connection info for the list of players in the
  // Assignments.roster to state storage, so that info can be read by the game
  // client(s).
  // TODO: change this to be agnostic; return a 'result' instead of a connection
  // string so it can be integrated with session service etc
  rpc CreateAssignments(Assignments) returns (Result) {}
  // Remove DGS connection info for the list of players in the Roster from
  // state storage.
  rpc DeleteAssignments(Roster) returns (Result) {}
}
