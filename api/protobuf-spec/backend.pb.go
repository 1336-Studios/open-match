// Code generated by protoc-gen-go. DO NOT EDIT.
// source: backend.proto

/*
Package backend is a generated protocol buffer package.

It is generated from these files:
	backend.proto

It has these top-level messages:
	ConnectionInfo
	Assignments
*/
package backend

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import om_messages "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Simple message used to pass the connection string for the DGS to the player.
type ConnectionInfo struct {
	ConnectionString string `protobuf:"bytes,1,opt,name=connection_string,json=connectionString" json:"connection_string,omitempty"`
}

func (m *ConnectionInfo) Reset()                    { *m = ConnectionInfo{} }
func (m *ConnectionInfo) String() string            { return proto.CompactTextString(m) }
func (*ConnectionInfo) ProtoMessage()               {}
func (*ConnectionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ConnectionInfo) GetConnectionString() string {
	if m != nil {
		return m.ConnectionString
	}
	return ""
}

type Assignments struct {
	Rosters        []*om_messages.Roster `protobuf:"bytes,1,rep,name=rosters" json:"rosters,omitempty"`
	ConnectionInfo *ConnectionInfo       `protobuf:"bytes,2,opt,name=connection_info,json=connectionInfo" json:"connection_info,omitempty"`
}

func (m *Assignments) Reset()                    { *m = Assignments{} }
func (m *Assignments) String() string            { return proto.CompactTextString(m) }
func (*Assignments) ProtoMessage()               {}
func (*Assignments) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Assignments) GetRosters() []*om_messages.Roster {
	if m != nil {
		return m.Rosters
	}
	return nil
}

func (m *Assignments) GetConnectionInfo() *ConnectionInfo {
	if m != nil {
		return m.ConnectionInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*ConnectionInfo)(nil), "ConnectionInfo")
	proto.RegisterType((*Assignments)(nil), "Assignments")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for API service

type APIClient interface {
	// Calls to ask the matchmaker to run a matchmaking function.
	//
	// Run MMF once.  Return a matchobject that fits this profile.
	CreateMatch(ctx context.Context, in *om_messages.Profile, opts ...grpc.CallOption) (*om_messages.MatchObject, error)
	// Continually run MMF and stream matchobjects that fit this profile until
	// client closes the connection.
	ListMatches(ctx context.Context, in *om_messages.Profile, opts ...grpc.CallOption) (API_ListMatchesClient, error)
	// Delete a matchobject from state storage manually. (Matchobjects in state
	// storage will also automatically expire after a while)
	DeleteMatch(ctx context.Context, in *om_messages.MatchObject, opts ...grpc.CallOption) (*om_messages.Result, error)
	// Call that manage communication of  DGS connection info to players.
	//
	// Write the DGS connection info for the list of players in the
	// Assignments.roster to state storage, so that info can be read by the game
	// client(s).
	// TODO: change this to be agnostic; return a 'result' instead of a connection
	// string so it can be integrated with session service etc
	CreateAssignments(ctx context.Context, in *Assignments, opts ...grpc.CallOption) (*om_messages.Result, error)
	// Remove DGS connection info for the list of players in the Roster from
	// state storage.
	DeleteAssignments(ctx context.Context, in *om_messages.Roster, opts ...grpc.CallOption) (*om_messages.Result, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) CreateMatch(ctx context.Context, in *om_messages.Profile, opts ...grpc.CallOption) (*om_messages.MatchObject, error) {
	out := new(om_messages.MatchObject)
	err := grpc.Invoke(ctx, "/API/CreateMatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListMatches(ctx context.Context, in *om_messages.Profile, opts ...grpc.CallOption) (API_ListMatchesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[0], c.cc, "/API/ListMatches", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIListMatchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_ListMatchesClient interface {
	Recv() (*om_messages.MatchObject, error)
	grpc.ClientStream
}

type aPIListMatchesClient struct {
	grpc.ClientStream
}

func (x *aPIListMatchesClient) Recv() (*om_messages.MatchObject, error) {
	m := new(om_messages.MatchObject)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) DeleteMatch(ctx context.Context, in *om_messages.MatchObject, opts ...grpc.CallOption) (*om_messages.Result, error) {
	out := new(om_messages.Result)
	err := grpc.Invoke(ctx, "/API/DeleteMatch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateAssignments(ctx context.Context, in *Assignments, opts ...grpc.CallOption) (*om_messages.Result, error) {
	out := new(om_messages.Result)
	err := grpc.Invoke(ctx, "/API/CreateAssignments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) DeleteAssignments(ctx context.Context, in *om_messages.Roster, opts ...grpc.CallOption) (*om_messages.Result, error) {
	out := new(om_messages.Result)
	err := grpc.Invoke(ctx, "/API/DeleteAssignments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	// Calls to ask the matchmaker to run a matchmaking function.
	//
	// Run MMF once.  Return a matchobject that fits this profile.
	CreateMatch(context.Context, *om_messages.Profile) (*om_messages.MatchObject, error)
	// Continually run MMF and stream matchobjects that fit this profile until
	// client closes the connection.
	ListMatches(*om_messages.Profile, API_ListMatchesServer) error
	// Delete a matchobject from state storage manually. (Matchobjects in state
	// storage will also automatically expire after a while)
	DeleteMatch(context.Context, *om_messages.MatchObject) (*om_messages.Result, error)
	// Call that manage communication of  DGS connection info to players.
	//
	// Write the DGS connection info for the list of players in the
	// Assignments.roster to state storage, so that info can be read by the game
	// client(s).
	// TODO: change this to be agnostic; return a 'result' instead of a connection
	// string so it can be integrated with session service etc
	CreateAssignments(context.Context, *Assignments) (*om_messages.Result, error)
	// Remove DGS connection info for the list of players in the Roster from
	// state storage.
	DeleteAssignments(context.Context, *om_messages.Roster) (*om_messages.Result, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_CreateMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(om_messages.Profile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/CreateMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateMatch(ctx, req.(*om_messages.Profile))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListMatches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(om_messages.Profile)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).ListMatches(m, &aPIListMatchesServer{stream})
}

type API_ListMatchesServer interface {
	Send(*om_messages.MatchObject) error
	grpc.ServerStream
}

type aPIListMatchesServer struct {
	grpc.ServerStream
}

func (x *aPIListMatchesServer) Send(m *om_messages.MatchObject) error {
	return x.ServerStream.SendMsg(m)
}

func _API_DeleteMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(om_messages.MatchObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/DeleteMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteMatch(ctx, req.(*om_messages.MatchObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Assignments)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/CreateAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateAssignments(ctx, req.(*Assignments))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_DeleteAssignments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(om_messages.Roster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).DeleteAssignments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/DeleteAssignments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).DeleteAssignments(ctx, req.(*om_messages.Roster))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMatch",
			Handler:    _API_CreateMatch_Handler,
		},
		{
			MethodName: "DeleteMatch",
			Handler:    _API_DeleteMatch_Handler,
		},
		{
			MethodName: "CreateAssignments",
			Handler:    _API_CreateAssignments_Handler,
		},
		{
			MethodName: "DeleteAssignments",
			Handler:    _API_DeleteAssignments_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListMatches",
			Handler:       _API_ListMatches_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "backend.proto",
}

func init() { proto.RegisterFile("backend.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 269 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x31, 0x95, 0x28, 0x9c, 0x4b, 0x4b, 0x3c, 0x55, 0x9d, 0x4a, 0x07, 0x1a, 0x04, 0xb2,
	0x50, 0x58, 0x58, 0x18, 0xaa, 0xb2, 0x54, 0x02, 0x51, 0x85, 0x07, 0xa8, 0x12, 0x73, 0x09, 0x2e,
	0x89, 0x8d, 0x7c, 0xe6, 0x5d, 0x79, 0x1c, 0x44, 0xa2, 0x80, 0x33, 0x30, 0xfe, 0x9f, 0x3f, 0xfd,
	0xb6, 0xef, 0xe0, 0x34, 0xcf, 0xd4, 0x3b, 0x9a, 0x57, 0xf9, 0xe1, 0xac, 0xb7, 0xb3, 0xc8, 0xd6,
	0xbb, 0x1a, 0x89, 0xb2, 0x12, 0xa9, 0x45, 0x8b, 0x7b, 0x18, 0xaf, 0xad, 0x31, 0xa8, 0xbc, 0xb6,
	0x66, 0x63, 0x0a, 0x2b, 0xae, 0x20, 0x52, 0xbf, 0x64, 0x47, 0xde, 0x69, 0x53, 0x4e, 0xd9, 0x9c,
	0xc5, 0x27, 0xe9, 0xd9, 0xdf, 0xc1, 0x4b, 0xc3, 0x17, 0x7b, 0xe0, 0x2b, 0x22, 0x5d, 0x9a, 0x1a,
	0x8d, 0x27, 0x71, 0x0e, 0x43, 0x67, 0xc9, 0xa3, 0xa3, 0x29, 0x9b, 0x0f, 0x62, 0x9e, 0x0c, 0x65,
	0xda, 0xe4, 0xb4, 0xe3, 0xe2, 0x0e, 0x26, 0x41, 0xbd, 0x36, 0x85, 0x9d, 0x1e, 0xce, 0x59, 0xcc,
	0x93, 0x89, 0xec, 0x3f, 0x24, 0x1d, 0xab, 0x5e, 0x4e, 0xbe, 0x18, 0x0c, 0x56, 0xdb, 0x8d, 0x58,
	0x02, 0x5f, 0x3b, 0xcc, 0x3c, 0x3e, 0x65, 0x5e, 0xbd, 0x89, 0x63, 0xb9, 0x75, 0xb6, 0xd0, 0x15,
	0xce, 0x46, 0xb2, 0x21, 0xcf, 0xf9, 0x1e, 0x95, 0x5f, 0x1c, 0x88, 0x4b, 0xe0, 0x8f, 0x9a, 0x7c,
	0x03, 0x91, 0xfe, 0x17, 0x6f, 0x98, 0xb8, 0x00, 0xfe, 0x80, 0x15, 0x76, 0x9d, 0x3d, 0x61, 0x36,
	0x94, 0x29, 0xd2, 0x67, 0xf5, 0x53, 0x79, 0x0d, 0x51, 0x7b, 0x77, 0xf8, 0xeb, 0x91, 0x0c, 0x52,
	0x68, 0x2f, 0x21, 0x6a, 0x5b, 0x43, 0xbb, 0x1b, 0x49, 0x20, 0xe6, 0x47, 0xcd, 0x32, 0x6e, 0xbf,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x03, 0x37, 0xc7, 0xc9, 0xb0, 0x01, 0x00, 0x00,
}
