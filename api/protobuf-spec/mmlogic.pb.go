// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mmlogic.proto

/*
Package mmlogic is a generated protocol buffer package.

It is generated from these files:
	mmlogic.proto

It has these top-level messages:
	IlInput
	Timestamp
*/
package mmlogic

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import om_messages "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// IlInput is an empty message reserved for future use.
type IlInput struct {
}

func (m *IlInput) Reset()                    { *m = IlInput{} }
func (m *IlInput) String() string            { return proto.CompactTextString(m) }
func (*IlInput) ProtoMessage()               {}
func (*IlInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Epoch timestamp in seconds.
type Timestamp struct {
	Ts int64 `protobuf:"varint,1,opt,name=ts" json:"ts,omitempty"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (m *Timestamp) String() string            { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Timestamp) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func init() {
	proto.RegisterType((*IlInput)(nil), "IlInput")
	proto.RegisterType((*Timestamp)(nil), "Timestamp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for API service

type APIClient interface {
	//  Send GetProfile an profile with the ID field populated, it will return a
	//  'filled' one.
	//  Note: filters are assumed to have been checked for validity by the
	//  backendapi  when accepting a profile
	GetProfile(ctx context.Context, in *om_messages.Profile, opts ...grpc.CallOption) (*om_messages.Profile, error)
	// CreateProposal  does the following:
	//  - adds all players in the Roster to the proposed player ignore list
	//  - writes the proposed match to the provided key
	//  - adds that key to the list of proposals to be considered
	CreateProposal(ctx context.Context, in *om_messages.MatchObject, opts ...grpc.CallOption) (*om_messages.Result, error)
	ReturnError(ctx context.Context, in *om_messages.Result, opts ...grpc.CallOption) (*om_messages.Result, error)
	// Player listing and filtering functions
	//
	// RetrievePlayerPool gets the list of players for every Filter in the
	// PlayerPool, and then removes all players it finds in the ignore list.  It
	// combines the results, and returns the resulting player pool.
	GetPlayerPool(ctx context.Context, in *om_messages.PlayerPool, opts ...grpc.CallOption) (API_GetPlayerPoolClient, error)
	// Ignore List functions
	//
	// IlInput is an empty message reserved for future use.
	GetAllIgnoredPlayers(ctx context.Context, in *IlInput, opts ...grpc.CallOption) (*om_messages.Roster, error)
	// RetrieveIgnoreList retrieves players from the
	// 'ignoreLists.proposedPlayers' ignore list specified in the config file
	// that were placed on the list before the provided timestamp.  To retrieve
	// all players on the list, provide the current time as the timestamp.
	ListIgnoredPlayers(ctx context.Context, in *Timestamp, opts ...grpc.CallOption) (*om_messages.Roster, error)
}

type aPIClient struct {
	cc *grpc.ClientConn
}

func NewAPIClient(cc *grpc.ClientConn) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) GetProfile(ctx context.Context, in *om_messages.Profile, opts ...grpc.CallOption) (*om_messages.Profile, error) {
	out := new(om_messages.Profile)
	err := grpc.Invoke(ctx, "/API/GetProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) CreateProposal(ctx context.Context, in *om_messages.MatchObject, opts ...grpc.CallOption) (*om_messages.Result, error) {
	out := new(om_messages.Result)
	err := grpc.Invoke(ctx, "/API/CreateProposal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ReturnError(ctx context.Context, in *om_messages.Result, opts ...grpc.CallOption) (*om_messages.Result, error) {
	out := new(om_messages.Result)
	err := grpc.Invoke(ctx, "/API/ReturnError", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) GetPlayerPool(ctx context.Context, in *om_messages.PlayerPool, opts ...grpc.CallOption) (API_GetPlayerPoolClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_API_serviceDesc.Streams[0], c.cc, "/API/GetPlayerPool", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIGetPlayerPoolClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type API_GetPlayerPoolClient interface {
	Recv() (*om_messages.PlayerPool, error)
	grpc.ClientStream
}

type aPIGetPlayerPoolClient struct {
	grpc.ClientStream
}

func (x *aPIGetPlayerPoolClient) Recv() (*om_messages.PlayerPool, error) {
	m := new(om_messages.PlayerPool)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aPIClient) GetAllIgnoredPlayers(ctx context.Context, in *IlInput, opts ...grpc.CallOption) (*om_messages.Roster, error) {
	out := new(om_messages.Roster)
	err := grpc.Invoke(ctx, "/API/GetAllIgnoredPlayers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPIClient) ListIgnoredPlayers(ctx context.Context, in *Timestamp, opts ...grpc.CallOption) (*om_messages.Roster, error) {
	out := new(om_messages.Roster)
	err := grpc.Invoke(ctx, "/API/ListIgnoredPlayers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for API service

type APIServer interface {
	//  Send GetProfile an profile with the ID field populated, it will return a
	//  'filled' one.
	//  Note: filters are assumed to have been checked for validity by the
	//  backendapi  when accepting a profile
	GetProfile(context.Context, *om_messages.Profile) (*om_messages.Profile, error)
	// CreateProposal  does the following:
	//  - adds all players in the Roster to the proposed player ignore list
	//  - writes the proposed match to the provided key
	//  - adds that key to the list of proposals to be considered
	CreateProposal(context.Context, *om_messages.MatchObject) (*om_messages.Result, error)
	ReturnError(context.Context, *om_messages.Result) (*om_messages.Result, error)
	// Player listing and filtering functions
	//
	// RetrievePlayerPool gets the list of players for every Filter in the
	// PlayerPool, and then removes all players it finds in the ignore list.  It
	// combines the results, and returns the resulting player pool.
	GetPlayerPool(*om_messages.PlayerPool, API_GetPlayerPoolServer) error
	// Ignore List functions
	//
	// IlInput is an empty message reserved for future use.
	GetAllIgnoredPlayers(context.Context, *IlInput) (*om_messages.Roster, error)
	// RetrieveIgnoreList retrieves players from the
	// 'ignoreLists.proposedPlayers' ignore list specified in the config file
	// that were placed on the list before the provided timestamp.  To retrieve
	// all players on the list, provide the current time as the timestamp.
	ListIgnoredPlayers(context.Context, *Timestamp) (*om_messages.Roster, error)
}

func RegisterAPIServer(s *grpc.Server, srv APIServer) {
	s.RegisterService(&_API_serviceDesc, srv)
}

func _API_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(om_messages.Profile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetProfile(ctx, req.(*om_messages.Profile))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_CreateProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(om_messages.MatchObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).CreateProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/CreateProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).CreateProposal(ctx, req.(*om_messages.MatchObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ReturnError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(om_messages.Result)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ReturnError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/ReturnError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ReturnError(ctx, req.(*om_messages.Result))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_GetPlayerPool_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(om_messages.PlayerPool)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).GetPlayerPool(m, &aPIGetPlayerPoolServer{stream})
}

type API_GetPlayerPoolServer interface {
	Send(*om_messages.PlayerPool) error
	grpc.ServerStream
}

type aPIGetPlayerPoolServer struct {
	grpc.ServerStream
}

func (x *aPIGetPlayerPoolServer) Send(m *om_messages.PlayerPool) error {
	return x.ServerStream.SendMsg(m)
}

func _API_GetAllIgnoredPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IlInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).GetAllIgnoredPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/GetAllIgnoredPlayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).GetAllIgnoredPlayers(ctx, req.(*IlInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _API_ListIgnoredPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Timestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APIServer).ListIgnoredPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/API/ListIgnoredPlayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APIServer).ListIgnoredPlayers(ctx, req.(*Timestamp))
	}
	return interceptor(ctx, in, info, handler)
}

var _API_serviceDesc = grpc.ServiceDesc{
	ServiceName: "API",
	HandlerType: (*APIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProfile",
			Handler:    _API_GetProfile_Handler,
		},
		{
			MethodName: "CreateProposal",
			Handler:    _API_CreateProposal_Handler,
		},
		{
			MethodName: "ReturnError",
			Handler:    _API_ReturnError_Handler,
		},
		{
			MethodName: "GetAllIgnoredPlayers",
			Handler:    _API_GetAllIgnoredPlayers_Handler,
		},
		{
			MethodName: "ListIgnoredPlayers",
			Handler:    _API_ListIgnoredPlayers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPlayerPool",
			Handler:       _API_GetPlayerPool_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mmlogic.proto",
}

func init() { proto.RegisterFile("mmlogic.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0xd3, 0x16, 0x6c, 0x3b, 0xb5, 0x05, 0x07, 0x0f, 0x12, 0x2f, 0xba, 0x27, 0xa5, 0xb8,
	0x88, 0xfe, 0x82, 0x22, 0x52, 0x02, 0x8a, 0xa1, 0x78, 0x97, 0x6d, 0x1c, 0x63, 0x64, 0x37, 0x13,
	0x76, 0x26, 0x07, 0x6f, 0xfe, 0x74, 0xa9, 0xad, 0x35, 0x78, 0x7b, 0x6f, 0xde, 0xc7, 0x0c, 0xf3,
	0x60, 0x1a, 0x82, 0xe7, 0xb2, 0x2a, 0x6c, 0x13, 0x59, 0x39, 0x3d, 0xe2, 0xf0, 0x12, 0x48, 0xc4,
	0x95, 0x24, 0xdb, 0x91, 0x19, 0xc3, 0x30, 0xf3, 0x59, 0xdd, 0xb4, 0x6a, 0x4e, 0x61, 0xfc, 0x5c,
	0x05, 0x12, 0x75, 0xa1, 0xc1, 0x19, 0xf4, 0x55, 0x4e, 0x7a, 0x67, 0xbd, 0x8b, 0xc1, 0xaa, 0xaf,
	0x72, 0xf3, 0xd5, 0x87, 0xc1, 0x22, 0xcf, 0xd0, 0x00, 0x2c, 0x49, 0xf3, 0xc8, 0x6f, 0x95, 0x27,
	0x1c, 0xd9, 0x9d, 0x4a, 0xf7, 0xca, 0x24, 0x78, 0x09, 0xb3, 0xbb, 0x48, 0x4e, 0x29, 0x8f, 0xdc,
	0xb0, 0x38, 0x8f, 0x87, 0xf6, 0xd1, 0x69, 0xf1, 0xfe, 0xb4, 0xfe, 0xa0, 0x42, 0xd3, 0xa1, 0x5d,
	0x91, 0xb4, 0x5e, 0x4d, 0x82, 0xe7, 0x30, 0x59, 0x91, 0xb6, 0xb1, 0xbe, 0x8f, 0x91, 0x23, 0xfe,
	0x26, 0x5d, 0xe4, 0x0a, 0xa6, 0x9b, 0x8b, 0xde, 0x7d, 0x52, 0xcc, 0x99, 0x3d, 0x4e, 0xec, 0x9f,
	0x49, 0xbb, 0xc6, 0x24, 0xd7, 0x3d, 0x9c, 0xc3, 0xf1, 0x92, 0x74, 0xe1, 0x7d, 0x56, 0xd6, 0x1c,
	0xe9, 0x75, 0x1b, 0x0b, 0x8e, 0xec, 0xee, 0xcf, 0xcd, 0x6e, 0x16, 0xa5, 0x68, 0x12, 0x9c, 0x03,
	0x3e, 0x54, 0xa2, 0xff, 0x50, 0xb0, 0xfb, 0x1e, 0x3a, 0xf0, 0xfa, 0xe0, 0xa7, 0xb1, 0xdb, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x52, 0x6e, 0xac, 0xbf, 0x55, 0x01, 0x00, 0x00,
}
