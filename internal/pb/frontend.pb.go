// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/protobuf-spec/frontend.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Data structure for a group of players  to pass to the matchmaking function.
// Obviously, the group can be a group of one!
type Group struct {
	Id         string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Properties string `protobuf:"bytes,2,opt,name=properties" json:"properties,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Group) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Group) GetProperties() string {
	if m != nil {
		return m.Properties
	}
	return ""
}

type PlayerId struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *PlayerId) Reset()                    { *m = PlayerId{} }
func (m *PlayerId) String() string            { return proto.CompactTextString(m) }
func (*PlayerId) ProtoMessage()               {}
func (*PlayerId) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *PlayerId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Group)(nil), "api.Group")
	proto.RegisterType((*PlayerId)(nil), "api.PlayerId")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Frontend service

type FrontendClient interface {
	CreateRequest(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Result, error)
	DeleteRequest(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Result, error)
	GetAssignment(ctx context.Context, in *PlayerId, opts ...grpc.CallOption) (*ConnectionInfo, error)
	DeleteAssignment(ctx context.Context, in *PlayerId, opts ...grpc.CallOption) (*Result, error)
}

type frontendClient struct {
	cc *grpc.ClientConn
}

func NewFrontendClient(cc *grpc.ClientConn) FrontendClient {
	return &frontendClient{cc}
}

func (c *frontendClient) CreateRequest(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/api.Frontend/CreateRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) DeleteRequest(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/api.Frontend/DeleteRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) GetAssignment(ctx context.Context, in *PlayerId, opts ...grpc.CallOption) (*ConnectionInfo, error) {
	out := new(ConnectionInfo)
	err := grpc.Invoke(ctx, "/api.Frontend/GetAssignment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frontendClient) DeleteAssignment(ctx context.Context, in *PlayerId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/api.Frontend/DeleteAssignment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Frontend service

type FrontendServer interface {
	CreateRequest(context.Context, *Group) (*Result, error)
	DeleteRequest(context.Context, *Group) (*Result, error)
	GetAssignment(context.Context, *PlayerId) (*ConnectionInfo, error)
	DeleteAssignment(context.Context, *PlayerId) (*Result, error)
}

func RegisterFrontendServer(s *grpc.Server, srv FrontendServer) {
	s.RegisterService(&_Frontend_serviceDesc, srv)
}

func _Frontend_CreateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).CreateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Frontend/CreateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).CreateRequest(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_DeleteRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).DeleteRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Frontend/DeleteRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).DeleteRequest(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_GetAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).GetAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Frontend/GetAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).GetAssignment(ctx, req.(*PlayerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Frontend_DeleteAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrontendServer).DeleteAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Frontend/DeleteAssignment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrontendServer).DeleteAssignment(ctx, req.(*PlayerId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Frontend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Frontend",
	HandlerType: (*FrontendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRequest",
			Handler:    _Frontend_CreateRequest_Handler,
		},
		{
			MethodName: "DeleteRequest",
			Handler:    _Frontend_DeleteRequest_Handler,
		},
		{
			MethodName: "GetAssignment",
			Handler:    _Frontend_GetAssignment_Handler,
		},
		{
			MethodName: "DeleteAssignment",
			Handler:    _Frontend_DeleteAssignment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protobuf-spec/frontend.proto",
}

func init() { proto.RegisterFile("api/protobuf-spec/frontend.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0xd0, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0x05, 0xf0, 0x26, 0xa2, 0xd4, 0x85, 0x48, 0xd9, 0x53, 0xc8, 0x41, 0x4a, 0x4e, 0x5e, 0x9a,
	0x05, 0xa5, 0x14, 0xbc, 0x69, 0xc4, 0xd0, 0x5b, 0xc9, 0xd1, 0xdb, 0x26, 0x99, 0xa4, 0x0b, 0x9b,
	0x9d, 0x75, 0x77, 0xf6, 0xe0, 0xa7, 0xf5, 0xab, 0x88, 0xa9, 0xff, 0x90, 0x0a, 0x5e, 0x1f, 0xf3,
	0xe3, 0x3d, 0x86, 0x2d, 0xa5, 0x55, 0xc2, 0x3a, 0x24, 0x6c, 0x42, 0xbf, 0xf2, 0x16, 0x5a, 0xd1,
	0x3b, 0x34, 0x04, 0xa6, 0x2b, 0xa6, 0x98, 0x9f, 0x48, 0xab, 0xb2, 0x23, 0x67, 0x23, 0x78, 0x2f,
	0x07, 0xf0, 0x87, 0xb3, 0x7c, 0xc3, 0x4e, 0x2b, 0x87, 0xc1, 0xf2, 0x0b, 0x16, 0xab, 0x2e, 0x8d,
	0x96, 0xd1, 0xd5, 0x79, 0x1d, 0xab, 0x8e, 0x5f, 0x32, 0x66, 0x1d, 0x5a, 0x70, 0xa4, 0xc0, 0xa7,
	0xf1, 0x94, 0xff, 0x48, 0xf2, 0x8c, 0xcd, 0x77, 0x5a, 0xbe, 0x80, 0xdb, 0x76, 0xbf, 0xed, 0xf5,
	0x6b, 0xc4, 0xe6, 0x8f, 0x1f, 0x73, 0xb8, 0x60, 0x49, 0xe9, 0x40, 0x12, 0xd4, 0xf0, 0x1c, 0xc0,
	0x13, 0x67, 0x85, 0xb4, 0xaa, 0x98, 0x5a, 0xb3, 0x45, 0xf1, 0xb5, 0xa7, 0x06, 0x1f, 0x34, 0xe5,
	0xb3, 0x77, 0xf0, 0x00, 0x1a, 0xfe, 0x0f, 0x6e, 0x59, 0x52, 0x01, 0xdd, 0x79, 0xaf, 0x06, 0x33,
	0x82, 0x21, 0x9e, 0x4c, 0xe0, 0x73, 0x5e, 0x96, 0x7e, 0x9b, 0x12, 0x8d, 0x81, 0x96, 0x14, 0x9a,
	0xad, 0xe9, 0x31, 0x9f, 0xf1, 0x35, 0x5b, 0x1c, 0xca, 0xfe, 0xe6, 0x47, 0x2a, 0xef, 0x37, 0x4f,
	0xeb, 0x41, 0xd1, 0x3e, 0x34, 0x45, 0x8b, 0xa3, 0xa8, 0x10, 0x07, 0x0d, 0xa5, 0xc6, 0xd0, 0xed,
	0xb4, 0xa4, 0x1e, 0xdd, 0x28, 0xd0, 0x82, 0x59, 0x8d, 0x92, 0xda, 0xbd, 0x50, 0x86, 0xc0, 0x19,
	0xa9, 0x85, 0x6d, 0x9a, 0xb3, 0xe9, 0xed, 0x37, 0x6f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x97, 0x2e,
	0x6a, 0x58, 0xc1, 0x01, 0x00, 0x00,
}
