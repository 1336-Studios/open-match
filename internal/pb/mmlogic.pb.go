// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/protobuf-spec/mmlogic.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MmLogic service

type MmLogicClient interface {
	//  Send GetProfile an profile with the ID field populated, it will return a
	//  'filled' one.
	//  Note: filters are assumed to have been checked for validity by the
	//  backendapi  when accepting a profile
	GetProfile(ctx context.Context, in *Profile, opts ...grpc.CallOption) (*Profile, error)
	// CreateProposal  does the following:
	//  - adds all players in the Roster to the proposed player ignore list
	//  - writes the proposed match to the provided key
	//  - adds that key to the list of proposals to be considered
	CreateProposal(ctx context.Context, in *MatchObject, opts ...grpc.CallOption) (*Result, error)
	ReturnError(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Result, error)
	// Player listing and filtering functions
	//
	// RetrievePlayerPool gets the list of players for every Filter in the
	// PlayerPool, and then removes all players it finds in the ignore list.  It
	// combines the results, and returns the resulting player pool.
	GetPlayerPool(ctx context.Context, in *PlayerPool, opts ...grpc.CallOption) (MmLogic_GetPlayerPoolClient, error)
	// Ignore List functions
	//
	// IlInput is an empty message reserved for future use.
	GetAllIgnoredPlayers(ctx context.Context, in *IlInput, opts ...grpc.CallOption) (*Roster, error)
	// RetrieveIgnoreList retrieves players from the ignore list specified in the
	// config file under 'ignoreLists.proposedPlayers.key'.
	ListIgnoredPlayers(ctx context.Context, in *IlInput, opts ...grpc.CallOption) (*Roster, error)
}

type mmLogicClient struct {
	cc *grpc.ClientConn
}

func NewMmLogicClient(cc *grpc.ClientConn) MmLogicClient {
	return &mmLogicClient{cc}
}

func (c *mmLogicClient) GetProfile(ctx context.Context, in *Profile, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := grpc.Invoke(ctx, "/api.MmLogic/GetProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmLogicClient) CreateProposal(ctx context.Context, in *MatchObject, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/api.MmLogic/CreateProposal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmLogicClient) ReturnError(ctx context.Context, in *Result, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/api.MmLogic/ReturnError", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmLogicClient) GetPlayerPool(ctx context.Context, in *PlayerPool, opts ...grpc.CallOption) (MmLogic_GetPlayerPoolClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MmLogic_serviceDesc.Streams[0], c.cc, "/api.MmLogic/GetPlayerPool", opts...)
	if err != nil {
		return nil, err
	}
	x := &mmLogicGetPlayerPoolClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MmLogic_GetPlayerPoolClient interface {
	Recv() (*PlayerPool, error)
	grpc.ClientStream
}

type mmLogicGetPlayerPoolClient struct {
	grpc.ClientStream
}

func (x *mmLogicGetPlayerPoolClient) Recv() (*PlayerPool, error) {
	m := new(PlayerPool)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mmLogicClient) GetAllIgnoredPlayers(ctx context.Context, in *IlInput, opts ...grpc.CallOption) (*Roster, error) {
	out := new(Roster)
	err := grpc.Invoke(ctx, "/api.MmLogic/GetAllIgnoredPlayers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mmLogicClient) ListIgnoredPlayers(ctx context.Context, in *IlInput, opts ...grpc.CallOption) (*Roster, error) {
	out := new(Roster)
	err := grpc.Invoke(ctx, "/api.MmLogic/ListIgnoredPlayers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MmLogic service

type MmLogicServer interface {
	//  Send GetProfile an profile with the ID field populated, it will return a
	//  'filled' one.
	//  Note: filters are assumed to have been checked for validity by the
	//  backendapi  when accepting a profile
	GetProfile(context.Context, *Profile) (*Profile, error)
	// CreateProposal  does the following:
	//  - adds all players in the Roster to the proposed player ignore list
	//  - writes the proposed match to the provided key
	//  - adds that key to the list of proposals to be considered
	CreateProposal(context.Context, *MatchObject) (*Result, error)
	ReturnError(context.Context, *Result) (*Result, error)
	// Player listing and filtering functions
	//
	// RetrievePlayerPool gets the list of players for every Filter in the
	// PlayerPool, and then removes all players it finds in the ignore list.  It
	// combines the results, and returns the resulting player pool.
	GetPlayerPool(*PlayerPool, MmLogic_GetPlayerPoolServer) error
	// Ignore List functions
	//
	// IlInput is an empty message reserved for future use.
	GetAllIgnoredPlayers(context.Context, *IlInput) (*Roster, error)
	// RetrieveIgnoreList retrieves players from the ignore list specified in the
	// config file under 'ignoreLists.proposedPlayers.key'.
	ListIgnoredPlayers(context.Context, *IlInput) (*Roster, error)
}

func RegisterMmLogicServer(s *grpc.Server, srv MmLogicServer) {
	s.RegisterService(&_MmLogic_serviceDesc, srv)
}

func _MmLogic_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Profile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmLogicServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MmLogic/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmLogicServer).GetProfile(ctx, req.(*Profile))
	}
	return interceptor(ctx, in, info, handler)
}

func _MmLogic_CreateProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmLogicServer).CreateProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MmLogic/CreateProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmLogicServer).CreateProposal(ctx, req.(*MatchObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _MmLogic_ReturnError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Result)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmLogicServer).ReturnError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MmLogic/ReturnError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmLogicServer).ReturnError(ctx, req.(*Result))
	}
	return interceptor(ctx, in, info, handler)
}

func _MmLogic_GetPlayerPool_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PlayerPool)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MmLogicServer).GetPlayerPool(m, &mmLogicGetPlayerPoolServer{stream})
}

type MmLogic_GetPlayerPoolServer interface {
	Send(*PlayerPool) error
	grpc.ServerStream
}

type mmLogicGetPlayerPoolServer struct {
	grpc.ServerStream
}

func (x *mmLogicGetPlayerPoolServer) Send(m *PlayerPool) error {
	return x.ServerStream.SendMsg(m)
}

func _MmLogic_GetAllIgnoredPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IlInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmLogicServer).GetAllIgnoredPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MmLogic/GetAllIgnoredPlayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmLogicServer).GetAllIgnoredPlayers(ctx, req.(*IlInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _MmLogic_ListIgnoredPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IlInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MmLogicServer).ListIgnoredPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MmLogic/ListIgnoredPlayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MmLogicServer).ListIgnoredPlayers(ctx, req.(*IlInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _MmLogic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.MmLogic",
	HandlerType: (*MmLogicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProfile",
			Handler:    _MmLogic_GetProfile_Handler,
		},
		{
			MethodName: "CreateProposal",
			Handler:    _MmLogic_CreateProposal_Handler,
		},
		{
			MethodName: "ReturnError",
			Handler:    _MmLogic_ReturnError_Handler,
		},
		{
			MethodName: "GetAllIgnoredPlayers",
			Handler:    _MmLogic_GetAllIgnoredPlayers_Handler,
		},
		{
			MethodName: "ListIgnoredPlayers",
			Handler:    _MmLogic_ListIgnoredPlayers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPlayerPool",
			Handler:       _MmLogic_GetPlayerPool_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/protobuf-spec/mmlogic.proto",
}

func init() { proto.RegisterFile("api/protobuf-spec/mmlogic.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0xab, 0x82, 0x42, 0x44, 0xd1, 0x50, 0x2f, 0x7b, 0x51, 0x7a, 0x6f, 0x57, 0xac, 0xe2,
	0x41, 0x44, 0xb4, 0x48, 0x29, 0xb4, 0x58, 0x7a, 0xf4, 0x96, 0x5d, 0xa7, 0xdb, 0xc8, 0x24, 0x13,
	0x26, 0x93, 0x83, 0x2f, 0xed, 0x33, 0xc8, 0xb6, 0xd2, 0x56, 0xba, 0x27, 0xaf, 0x5f, 0xbe, 0x3f,
	0x99, 0x3f, 0xa3, 0x2e, 0x4d, 0xb0, 0x79, 0x60, 0x12, 0x2a, 0xd2, 0xbc, 0x1b, 0x03, 0x94, 0xb9,
	0x73, 0x48, 0x95, 0x2d, 0x7b, 0x4b, 0xaa, 0x0f, 0x4c, 0xb0, 0xd9, 0x55, 0x83, 0x05, 0x31, 0x9a,
	0x0a, 0xe2, 0x4a, 0xbb, 0xf9, 0xde, 0x57, 0x47, 0x13, 0x37, 0xae, 0x83, 0xfa, 0x56, 0xa9, 0x21,
	0xc8, 0x94, 0x69, 0x6e, 0x11, 0xf4, 0x79, 0x6f, 0xad, 0xfe, 0xa2, 0x6c, 0x17, 0x75, 0x5a, 0xfa,
	0x41, 0x9d, 0x0e, 0x18, 0x8c, 0xc0, 0x94, 0x29, 0x50, 0x34, 0xa8, 0x2f, 0x36, 0xda, 0xc4, 0x48,
	0xb9, 0x78, 0x2b, 0x3e, 0xa1, 0x94, 0xec, 0x6c, 0x83, 0x67, 0x10, 0x13, 0x4a, 0xa7, 0xa5, 0xfb,
	0xea, 0x78, 0x06, 0x92, 0xd8, 0xbf, 0x32, 0x13, 0xeb, 0x1d, 0xa5, 0x31, 0xf4, 0xa4, 0x4e, 0xea,
	0x39, 0xd1, 0x7c, 0x01, 0x4f, 0x89, 0x50, 0xb7, 0xb7, 0xe6, 0x5a, 0xd3, 0xac, 0x91, 0x76, 0x5a,
	0xd7, 0x7b, 0xfa, 0x51, 0xb5, 0x87, 0x20, 0xcf, 0x88, 0xa3, 0xca, 0x13, 0xc3, 0xc7, 0xea, 0x38,
	0x6e, 0x57, 0x1e, 0xe1, 0xc8, 0x87, 0xf4, 0xf7, 0x7d, 0x8a, 0x02, 0xbc, 0x6c, 0xac, 0xc7, 0x36,
	0xca, 0xbf, 0xc2, 0x2f, 0xf7, 0xef, 0x77, 0x95, 0x95, 0x45, 0x2a, 0x7a, 0x25, 0xb9, 0x7c, 0x48,
	0x54, 0x21, 0x0c, 0x90, 0x52, 0x7d, 0x8f, 0xcc, 0x89, 0x5d, 0x4e, 0x01, 0x7c, 0xd7, 0xd5, 0x1f,
	0x97, 0x5b, 0x2f, 0xc0, 0xde, 0x60, 0x1e, 0x8a, 0xe2, 0x70, 0xb9, 0xb0, 0xfe, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x71, 0x3b, 0xdb, 0x32, 0xfa, 0x01, 0x00, 0x00,
}
