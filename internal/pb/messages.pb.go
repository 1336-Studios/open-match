// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/protobuf-spec/messages.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Profile struct {
	Id         string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Properties string `protobuf:"bytes,2,opt,name=properties" json:"properties,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// When you send a Profile to the backendAPI, it looks to see if you populated
	// this field with protobuf-encoded PlayerPool objects containing valid the filters
	// objects.  If you did, they are used by OM.  If you didn't, the backendAPI
	// next looks in your properties blob at the key specified in the 'jsonkeys.pools'
	// config value from config/matchmaker_config.json - If it finds valid player
	// pool definitions at that key, it will try to unmarshal them into this field.
	// If you didn't specify valid player pools in either place, OM assumes you
	// know what you're doing and just leaves this unpopulatd.
	Pools []*PlayerPool `protobuf:"bytes,4,rep,name=pools" json:"pools,omitempty"`
}

func (m *Profile) Reset()                    { *m = Profile{} }
func (m *Profile) String() string            { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()               {}
func (*Profile) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Profile) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Profile) GetProperties() string {
	if m != nil {
		return m.Properties
	}
	return ""
}

func (m *Profile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Profile) GetPools() []*PlayerPool {
	if m != nil {
		return m.Pools
	}
	return nil
}

// A MMF takes the Profile object above, and generates a MatchObject.
type MatchObject struct {
	Id         string        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Properties string        `protobuf:"bytes,2,opt,name=properties" json:"properties,omitempty"`
	Error      string        `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	Rosters    []*Roster     `protobuf:"bytes,4,rep,name=rosters" json:"rosters,omitempty"`
	Pools      []*PlayerPool `protobuf:"bytes,5,rep,name=pools" json:"pools,omitempty"`
}

func (m *MatchObject) Reset()                    { *m = MatchObject{} }
func (m *MatchObject) String() string            { return proto.CompactTextString(m) }
func (*MatchObject) ProtoMessage()               {}
func (*MatchObject) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *MatchObject) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MatchObject) GetProperties() string {
	if m != nil {
		return m.Properties
	}
	return ""
}

func (m *MatchObject) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *MatchObject) GetRosters() []*Roster {
	if m != nil {
		return m.Rosters
	}
	return nil
}

func (m *MatchObject) GetPools() []*PlayerPool {
	if m != nil {
		return m.Pools
	}
	return nil
}

// Data structure to hold a list of players in a match.
type Roster struct {
	Name    string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Players []*Player `protobuf:"bytes,2,rep,name=players" json:"players,omitempty"`
}

func (m *Roster) Reset()                    { *m = Roster{} }
func (m *Roster) String() string            { return proto.CompactTextString(m) }
func (*Roster) ProtoMessage()               {}
func (*Roster) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *Roster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Roster) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

// A filter to apply to the player pool.
type Filter struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Attribute string `protobuf:"bytes,2,opt,name=attribute" json:"attribute,omitempty"`
	Maxv      int64  `protobuf:"varint,3,opt,name=maxv" json:"maxv,omitempty"`
	Minv      int64  `protobuf:"varint,4,opt,name=minv" json:"minv,omitempty"`
	Stats     *Stats `protobuf:"bytes,5,opt,name=stats" json:"stats,omitempty"`
}

func (m *Filter) Reset()                    { *m = Filter{} }
func (m *Filter) String() string            { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()               {}
func (*Filter) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *Filter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Filter) GetAttribute() string {
	if m != nil {
		return m.Attribute
	}
	return ""
}

func (m *Filter) GetMaxv() int64 {
	if m != nil {
		return m.Maxv
	}
	return 0
}

func (m *Filter) GetMinv() int64 {
	if m != nil {
		return m.Minv
	}
	return 0
}

func (m *Filter) GetStats() *Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type Stats struct {
	Count   int64   `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	Elapsed float64 `protobuf:"fixed64,2,opt,name=elapsed" json:"elapsed,omitempty"`
}

func (m *Stats) Reset()                    { *m = Stats{} }
func (m *Stats) String() string            { return proto.CompactTextString(m) }
func (*Stats) ProtoMessage()               {}
func (*Stats) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

func (m *Stats) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Stats) GetElapsed() float64 {
	if m != nil {
		return m.Elapsed
	}
	return 0
}

type PlayerPool struct {
	Name    string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Filters []*Filter `protobuf:"bytes,2,rep,name=filters" json:"filters,omitempty"`
	Roster  *Roster   `protobuf:"bytes,3,opt,name=roster" json:"roster,omitempty"`
	Stats   *Stats    `protobuf:"bytes,4,opt,name=stats" json:"stats,omitempty"`
}

func (m *PlayerPool) Reset()                    { *m = PlayerPool{} }
func (m *PlayerPool) String() string            { return proto.CompactTextString(m) }
func (*PlayerPool) ProtoMessage()               {}
func (*PlayerPool) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{5} }

func (m *PlayerPool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PlayerPool) GetFilters() []*Filter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *PlayerPool) GetRoster() *Roster {
	if m != nil {
		return m.Roster
	}
	return nil
}

func (m *PlayerPool) GetStats() *Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

// Data structure for a profile to pass to the matchmaking function.
type Player struct {
	Id         string              `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Properties string              `protobuf:"bytes,2,opt,name=properties" json:"properties,omitempty"`
	Pool       string              `protobuf:"bytes,3,opt,name=pool" json:"pool,omitempty"`
	Attributes []*Player_Attribute `protobuf:"bytes,4,rep,name=attributes" json:"attributes,omitempty"`
}

func (m *Player) Reset()                    { *m = Player{} }
func (m *Player) String() string            { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()               {}
func (*Player) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6} }

func (m *Player) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Player) GetProperties() string {
	if m != nil {
		return m.Properties
	}
	return ""
}

func (m *Player) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *Player) GetAttributes() []*Player_Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type Player_Attribute struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *Player_Attribute) Reset()                    { *m = Player_Attribute{} }
func (m *Player_Attribute) String() string            { return proto.CompactTextString(m) }
func (*Player_Attribute) ProtoMessage()               {}
func (*Player_Attribute) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{6, 0} }

func (m *Player_Attribute) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Player_Attribute) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// Simple message to return success/failure and error status.
type Result struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{7} }

func (m *Result) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Result) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// IlInput is an empty message reserved for future use.
type IlInput struct {
}

func (m *IlInput) Reset()                    { *m = IlInput{} }
func (m *IlInput) String() string            { return proto.CompactTextString(m) }
func (*IlInput) ProtoMessage()               {}
func (*IlInput) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{8} }

// Epoch timestamp in seconds.
type Timestamp struct {
	Ts int64 `protobuf:"varint,1,opt,name=ts" json:"ts,omitempty"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (m *Timestamp) String() string            { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{9} }

func (m *Timestamp) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

// Simple message used to pass the connection string for the DGS to the player.
type ConnectionInfo struct {
	ConnectionString string `protobuf:"bytes,1,opt,name=connection_string,json=connectionString" json:"connection_string,omitempty"`
}

func (m *ConnectionInfo) Reset()                    { *m = ConnectionInfo{} }
func (m *ConnectionInfo) String() string            { return proto.CompactTextString(m) }
func (*ConnectionInfo) ProtoMessage()               {}
func (*ConnectionInfo) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{10} }

func (m *ConnectionInfo) GetConnectionString() string {
	if m != nil {
		return m.ConnectionString
	}
	return ""
}

type Assignments struct {
	Rosters        []*Roster       `protobuf:"bytes,1,rep,name=rosters" json:"rosters,omitempty"`
	ConnectionInfo *ConnectionInfo `protobuf:"bytes,2,opt,name=connection_info,json=connectionInfo" json:"connection_info,omitempty"`
}

func (m *Assignments) Reset()                    { *m = Assignments{} }
func (m *Assignments) String() string            { return proto.CompactTextString(m) }
func (*Assignments) ProtoMessage()               {}
func (*Assignments) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{11} }

func (m *Assignments) GetRosters() []*Roster {
	if m != nil {
		return m.Rosters
	}
	return nil
}

func (m *Assignments) GetConnectionInfo() *ConnectionInfo {
	if m != nil {
		return m.ConnectionInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*Profile)(nil), "messages.Profile")
	proto.RegisterType((*MatchObject)(nil), "messages.MatchObject")
	proto.RegisterType((*Roster)(nil), "messages.Roster")
	proto.RegisterType((*Filter)(nil), "messages.Filter")
	proto.RegisterType((*Stats)(nil), "messages.Stats")
	proto.RegisterType((*PlayerPool)(nil), "messages.PlayerPool")
	proto.RegisterType((*Player)(nil), "messages.Player")
	proto.RegisterType((*Player_Attribute)(nil), "messages.Player.Attribute")
	proto.RegisterType((*Result)(nil), "messages.Result")
	proto.RegisterType((*IlInput)(nil), "messages.IlInput")
	proto.RegisterType((*Timestamp)(nil), "messages.Timestamp")
	proto.RegisterType((*ConnectionInfo)(nil), "messages.ConnectionInfo")
	proto.RegisterType((*Assignments)(nil), "messages.Assignments")
}

func init() { proto.RegisterFile("api/protobuf-spec/messages.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xd1, 0x6a, 0xdb, 0x3c,
	0x14, 0xc6, 0x49, 0xec, 0x34, 0x27, 0xd0, 0xf6, 0x17, 0xbd, 0x30, 0xfd, 0xc7, 0x28, 0x86, 0x41,
	0xe8, 0x68, 0x0c, 0x19, 0xa5, 0x63, 0xb0, 0x8b, 0xac, 0xb0, 0x2d, 0x17, 0x63, 0x41, 0xdd, 0xd5,
	0x6e, 0x86, 0xec, 0xc8, 0xa9, 0x86, 0x2c, 0x09, 0x49, 0x0e, 0x2b, 0xec, 0x05, 0xf6, 0x10, 0x7b,
	0x82, 0x3d, 0xc4, 0x5e, 0x6d, 0x58, 0xb6, 0x63, 0xa7, 0x6b, 0x57, 0xb6, 0x3b, 0x9d, 0xef, 0x9c,
	0x63, 0x7d, 0xdf, 0xf9, 0x74, 0x0c, 0x27, 0x44, 0xb1, 0x58, 0x69, 0x69, 0x65, 0x52, 0x64, 0x67,
	0x46, 0xd1, 0x34, 0xce, 0xa9, 0x31, 0x64, 0x4d, 0xcd, 0xd4, 0xc1, 0x68, 0xaf, 0x89, 0xa3, 0x1b,
	0x18, 0x2e, 0xb5, 0xcc, 0x18, 0xa7, 0x68, 0x1f, 0x7a, 0x6c, 0x15, 0x7a, 0x27, 0xde, 0x64, 0x84,
	0x7b, 0x6c, 0x85, 0x1e, 0x03, 0x28, 0x2d, 0x15, 0xd5, 0x96, 0x51, 0x13, 0xf6, 0x1c, 0xde, 0x41,
	0x10, 0x82, 0x81, 0x20, 0x39, 0x0d, 0xfb, 0x2e, 0xe3, 0xce, 0xe8, 0x14, 0x7c, 0x25, 0x25, 0x37,
	0xe1, 0xe0, 0xa4, 0x3f, 0x19, 0xcf, 0x8e, 0xa6, 0xdb, 0x8b, 0x97, 0x9c, 0xdc, 0x50, 0xbd, 0x94,
	0x92, 0xe3, 0xaa, 0x24, 0xfa, 0xe1, 0xc1, 0xf8, 0x1d, 0xb1, 0xe9, 0xf5, 0xfb, 0xe4, 0x33, 0x4d,
	0xed, 0x5f, 0xdf, 0x7f, 0x04, 0x3e, 0xd5, 0x5a, 0xea, 0x9a, 0x40, 0x15, 0xa0, 0x53, 0x18, 0x6a,
	0x69, 0x2c, 0xd5, 0x0d, 0x87, 0xc3, 0x96, 0x03, 0x76, 0x09, 0xdc, 0x14, 0xb4, 0x6c, 0xfd, 0x87,
	0xd9, 0xbe, 0x85, 0xa0, 0x6a, 0xdf, 0xea, 0xf6, 0x76, 0x74, 0x0f, 0x95, 0x6b, 0x29, 0x89, 0xde,
	0xba, 0xb5, 0xfa, 0x16, 0x6e, 0x0a, 0xa2, 0x6f, 0x1e, 0x04, 0xaf, 0x19, 0xbf, 0xef, 0x53, 0x8f,
	0x60, 0x44, 0xac, 0xd5, 0x2c, 0x29, 0x2c, 0xad, 0x55, 0xb7, 0x40, 0xd9, 0x91, 0x93, 0x2f, 0x1b,
	0xa7, 0xb9, 0x8f, 0xdd, 0xd9, 0x61, 0x4c, 0x6c, 0xc2, 0x41, 0x8d, 0x31, 0xb1, 0x41, 0x4f, 0xc0,
	0x37, 0x96, 0xd8, 0x52, 0x9a, 0x37, 0x19, 0xcf, 0x0e, 0x5a, 0x3a, 0x57, 0x25, 0x8c, 0xab, 0x6c,
	0x74, 0x01, 0xbe, 0x8b, 0xcb, 0x61, 0xa6, 0xb2, 0x10, 0xd6, 0x51, 0xe9, 0xe3, 0x2a, 0x40, 0x21,
	0x0c, 0x29, 0x27, 0xca, 0xd0, 0x95, 0x63, 0xe2, 0xe1, 0x26, 0x8c, 0xbe, 0x7b, 0x00, 0xed, 0x90,
	0xee, 0x9b, 0x49, 0xe6, 0x64, 0xde, 0x31, 0x93, 0x4a, 0x3f, 0x6e, 0x0a, 0xd0, 0x04, 0x82, 0xca,
	0x14, 0x27, 0xec, 0x2e, 0xd3, 0xea, 0x7c, 0x2b, 0x6c, 0xf0, 0x47, 0x61, 0x3f, 0x3d, 0x08, 0x2a,
	0x7e, 0xff, 0xf2, 0xae, 0x4b, 0xcb, 0x9b, 0x77, 0x5d, 0x9e, 0xd1, 0x0b, 0x80, 0xad, 0x07, 0xcd,
	0xc3, 0x3a, 0xbe, 0x6d, 0xf1, 0x74, 0xde, 0x94, 0xe0, 0x4e, 0xf5, 0xf1, 0x39, 0x8c, 0xe6, 0x5d,
	0xff, 0x7e, 0x1b, 0xd4, 0x11, 0xf8, 0x1b, 0xc2, 0x8b, 0xca, 0xed, 0x3e, 0xae, 0x82, 0xe8, 0x39,
	0x04, 0x98, 0x9a, 0x82, 0x3b, 0x17, 0x4c, 0x91, 0xa6, 0xd4, 0x18, 0xd7, 0xb6, 0x87, 0x9b, 0xb0,
	0x5d, 0x81, 0x5e, 0x67, 0x05, 0xa2, 0x11, 0x0c, 0x17, 0x7c, 0x21, 0x54, 0x61, 0xa3, 0xff, 0x61,
	0xf4, 0x81, 0xe5, 0xd4, 0x58, 0x92, 0xab, 0x72, 0x10, 0xd6, 0xd4, 0x06, 0xf7, 0xac, 0x89, 0x5e,
	0xc2, 0xfe, 0xa5, 0x14, 0x82, 0xa6, 0x96, 0x49, 0xb1, 0x10, 0x99, 0x44, 0x4f, 0xe1, 0xbf, 0x74,
	0x8b, 0x7c, 0x32, 0x56, 0x33, 0xb1, 0xae, 0xa9, 0x1e, 0xb6, 0x89, 0x2b, 0x87, 0x47, 0x5f, 0x61,
	0x3c, 0x37, 0x86, 0xad, 0x45, 0x4e, 0x85, 0x35, 0xdd, 0xc5, 0xf3, 0x1e, 0x5a, 0xbc, 0x39, 0x1c,
	0x74, 0xee, 0x61, 0x22, 0x93, 0x4e, 0xc1, 0x78, 0x16, 0xb6, 0x3d, 0xbb, 0xd4, 0xf0, 0x7e, 0xba,
	0x13, 0xbf, 0xba, 0xf8, 0x78, 0xbe, 0x66, 0xf6, 0xba, 0x48, 0xa6, 0xa9, 0xcc, 0xe3, 0x37, 0x52,
	0xae, 0x39, 0xbd, 0xe4, 0xb2, 0x58, 0x2d, 0x39, 0xb1, 0x99, 0xd4, 0x79, 0x2c, 0x15, 0x15, 0x67,
	0x79, 0xf9, 0x83, 0x89, 0x99, 0xb0, 0x54, 0x0b, 0xc2, 0x63, 0x95, 0x24, 0x81, 0xfb, 0x05, 0x3e,
	0xfb, 0x15, 0x00, 0x00, 0xff, 0xff, 0x4d, 0xd0, 0xac, 0xed, 0x26, 0x05, 0x00, 0x00,
}
